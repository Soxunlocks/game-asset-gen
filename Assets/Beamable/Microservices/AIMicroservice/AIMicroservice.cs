using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Beamable.Api.Autogenerated.Models;
using Beamable.Common;
using Beamable.Common.Api;
using Beamable.Common.Api.Inventory;
using Beamable.Common.Inventory;
using Beamable.Microservices.Storage;
using Beamable.Server;
using Newtonsoft.Json;
using OpenAI_API;
using OpenAI_API.Completions;
using ItemCreateRequest = Beamable.Common.Api.Inventory.ItemCreateRequest;

namespace Beamable.Microservices
{
    [Microservice("AIMicroservice")]
    public class AIMicroservice : Microservice, IFederatedInventory<AiCloudIdentity>
    {
        const string SWORD_ID_CONTENT = "items.AiItemContent.AiSword";
        
        public async Promise<FederatedAuthenticationResponse> Authenticate(string token, string challenge,
            string solution)
        {
            return new FederatedAuthenticationResponse { user_id = Context.UserId.ToString() };
        }

        public async Promise<FederatedInventoryProxyState> GetInventoryState(string id)
        {
            var db = await Storage.AIStorageDatabase();
            var items = await AiInventoryItemCollection.GetAll(db, id);
            return items.ToFederatedInventoryProxyState();
        }

        public async Promise<FederatedInventoryProxyState> StartInventoryTransaction(string id, string transaction,
            Dictionary<string, long> currencies, List<ItemCreateRequest> newItems)
        {
            var api = new OpenAIAPI(Configuration.OpenAiApiKey);
            var db = await Storage.AIStorageDatabase();
            var items = new ConcurrentBag<AiInventoryItem>(await AiInventoryItemCollection.GetAll(db, id));

            var services = Services;
            var requester = Requester;

            foreach (var newItem in newItems)
            {
                _ = Task.Run(async () =>
                {
                    BeamableLogger.Log("Starting task for {item}", newItem.contentId);
                    try
                    {
                        var contentObject = await services.Content.GetContent(newItem.contentId);
                        var aiItemContent = contentObject as AiItemContent;
                        if (aiItemContent is not null)
                        {
                            var prompt = @$"I want to create 1 game item.
						    Item should be of type: '{aiItemContent.itemType}'.
						    Game theme is: '{aiItemContent.itemTheme}'.
						    Here is the list of item properties with descriptions, as JSON: {JsonConvert.SerializeObject(aiItemContent.dynamicProperties)}
						    Format the output as JSON object.";

                            BeamableLogger.Log("Sending {Prompt} to OpenAI API...", prompt);
                            var aiResponse = await api.Completions.CreateCompletionAsync(
                                new CompletionRequest
                                {
                                    Model = "text-davinci-003",
                                    Temperature = 0.9F,
                                    MaxTokens = 1500,
                                    Prompt = prompt
                                }
                            );
                            BeamableLogger.Log("Received responses {C}", aiResponse.Completions.FirstOrDefault()?.Text);

                            if (aiResponse.Completions.Count > 0 &&
                                TryParseAiResponse(aiResponse.Completions.First().Text, out var aiProps))
                            {
                                aiProps.Add("price", CalculatePrice(newItem.contentId).ToString());
                                var newAiItem = new AiInventoryItem
                                {
                                    ContentId = newItem.contentId,
                                    GamerTag = id,
                                    Properties = aiProps
                                };
                                if (newItem.contentId == SWORD_ID_CONTENT)
                                {
                                    var imagePrompt = newAiItem.Properties.GetValueOrDefault("image") ?? aiItemContent.itemType;
                                    BeamableLogger.Log("Generating image for {imagePrompt}", imagePrompt);
                                    var imageUrl = await GetScenarioImage(imagePrompt);
                                    newAiItem.Properties["image"] = imageUrl;
                                    BeamableLogger.Log("Generated image {i}", imageUrl);
                                }

                                await AiInventoryItemCollection.Save(db, newAiItem);
                                BeamableLogger.Log("Saved item {ID}", newAiItem.ItemId);
                                items.Add(newAiItem);
                                
                                BeamableLogger.Log("Reporting back state for {ID}", newAiItem.ItemId);
                                await requester.Request<CommonResponse>(Method.PUT,
                                    $"/object/inventory/{id}/proxy/state",
                                    items.ToFederatedInventoryProxyState());
                                BeamableLogger.Log("Reported state for {ID}", newAiItem.ItemId);
                            }
                        }
                        else
                        {
                            BeamableLogger.LogWarning("{ContentId} is not an AiItemContent", newItem.contentId);
                        }
                    }
                    catch (Exception ex)
                    {
                        BeamableLogger.LogError(ex);
                    }
                });
            }

            return items.ToFederatedInventoryProxyState();
        }

        private bool TryParseAiResponse(string response, out Dictionary<string, string> aiProps)
        {
            try
            {
                aiProps = JsonConvert.DeserializeObject<Dictionary<string, string>>(response);
                return true;
            }
            catch (Exception ex)
            {
                BeamableLogger.LogError(ex);
                aiProps = null;
                return false;
            }
        }

        private async Task<string> GetScenarioImage(string prompt)
        {
            try
            {
                var generateImageResponse = await ScenarioAPI.GenerateImage(new GenerateImageRequest
                {
                    prompt = prompt
                });
                var retryCount = 50;
                while (retryCount > 0)
                {
                    retryCount--;
                    var imageResponse = await ScenarioAPI.FetchImage(new FetchImageRequest
                    {
                        inferenceId = generateImageResponse.inference.id
                    });
                    if (imageResponse.inference.status == "succeeded")
                    {
                        return imageResponse.inference.images.Select(i => i.url).First();
                    }
                    await Task.Delay(1000);
                }
                return string.Empty;
            }
            catch (Exception ex)
            {
                BeamableLogger.LogError(ex);
                return string.Empty;
            }
        }

        [ClientCallable]
        public async Task<bool> SellSword(string itemId)
        {
            var id = Context.UserId.ToString();
            var db = await Storage.AIStorageDatabase();
            var items = await AiInventoryItemCollection.GetAll(db, id);
            
            var item = items.FirstOrDefault(item => item.ItemId == itemId);
            if (item is not null)
            {
                var reward = 0;
                if (int.TryParse(item.Properties.GetValueOrDefault("price", "10"), out int price))
                {
                    reward = price;
                }
                
                BeamableLogger.Log("Deleting item");
                await AiInventoryItemCollection.Delete(db, item);
                items.Remove(item);
                
                BeamableLogger.Log("Adding currency");
                await Services.Inventory.AddCurrency("currency.coins", reward);
                
                BeamableLogger.Log("Reporting back state");
                await Requester.Request<CommonResponse>(Method.PUT, $"/object/inventory/{id}/proxy/state",
                    items.ToFederatedInventoryProxyState());
                
                return true;
            }
            
            BeamableLogger.LogWarning("Item {ID} not found", itemId);
            return false;
        }
        

        private int CalculatePrice(string input)
        {
            const int basePrice = 30;
            const int randomize = 50;
            return input.GetHashCode() % randomize + basePrice;
        }
    }
}